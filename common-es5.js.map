{"version":3,"sources":["src/shared/service/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ISignIn } from '../interface/sign-in';\r\nimport { ISignUp } from '../interface/sign-up';\r\nimport { IEmail } from '../interface/email';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n    apiUrl: string;\r\n    userList: ISignUp[];\r\n\r\n    constructor(private http: HttpClient) {\r\n        this.userList = [];\r\n    }\r\n\r\n    signIn(model: ISignIn): boolean {\r\n        const user = this.userList.find(x => x.email === model.email && x.password === model.password);\r\n        if (user) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    signUp(model: ISignUp): boolean {\r\n        const user = this.userList.find(x => x.email === model.email);\r\n        if (user) {\r\n            return false;\r\n        }\r\n        this.userList.push(model);\r\n        return true;\r\n    }\r\n\r\n    forgotPassword(model: IEmail): boolean {\r\n        const user = this.userList.find(x => x.email === model.email);\r\n        if (user) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    resetPassword(model: ISignIn): boolean {\r\n        const index = this.userList.findIndex(x => x.email === model.email);\r\n        if (index >= 0) {\r\n            this.userList[index].password = model.password;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    saveToken(token: string) {\r\n        localStorage.setItem('userToken', token);\r\n    }\r\n\r\n    isLoggedin(): boolean {\r\n        const email = localStorage.getItem('userToken');\r\n        if (email) {\r\n            const index = this.userList.findIndex(x => x.email === email);\r\n            if (index >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getUserName(): string {\r\n        const email = localStorage.getItem('userToken');\r\n        const index = this.userList.findIndex(x => x.email === email);\r\n        if (index >= 0) {\r\n            return this.userList[index].name;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    logOut() {\r\n        localStorage.clear();\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"common-es5.js"}