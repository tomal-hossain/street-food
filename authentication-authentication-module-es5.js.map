{"version":3,"sources":["src/app/authentication/confirm-success/confirm-success.component.html","src/app/authentication/forgot-password/forgot-password.component.html","src/app/authentication/login/login.component.html","src/app/authentication/registraion-success/registraion-success.component.html","src/app/authentication/reset-password/reset-password.component.html","src/app/authentication/sign-up/sign-up.component.html","src/app/authentication/authentication-routing.module.ts","src/app/authentication/authentication.module.ts","src/app/authentication/confirm-success/confirm-success.component.ts","src/app/authentication/forgot-password/forgot-password.component.ts","src/app/authentication/login/login.component.ts","src/app/authentication/registraion-success/registraion-success.component.ts","src/app/authentication/reset-password/reset-password.component.ts","src/app/authentication/sign-up/sign-up.component.ts","src/shared/service/form.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Success! </h2>\\r\\n        <p>Please <a routerLink=\\\"../login\\\">Login</a> to continue.</p>\\r\\n    </nz-card>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Forgot Password </h2>\\r\\n        <form nz-form [formGroup]=\\\"forgotPasswordForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\r\\n            <nz-spin *ngIf=\\\"isLoadingFlag\\\" class=\\\"m-b-5\\\" nzSimple></nz-spin>\\r\\n            <nz-alert *ngIf=\\\"errorMessage\\\" nzType=\\\"error\\\" [nzMessage]=\\\"errorMessage\\\" nzShowIcon></nz-alert>\\r\\n            <nz-alert *ngIf=\\\"isSuccessMessage\\\" nzType=\\\"success\\\" nzMessage=\\\"A password reset link has been sent to your email. Please check\\\" nzShowIcon></nz-alert>\\r\\n            <nz-form-item>\\r\\n                <nz-form-control [nzErrorTip]=\\\"emailErrorTpl\\\">\\r\\n                    <nz-form-label nzNoColon nzFor=\\\"email\\\">Email</nz-form-label>\\r\\n                    <nz-input-group nzPrefixIcon=\\\"mail\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"email\\\" nz-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <span>Back to <a routerLink=\\\"../login\\\">Sign In</a></span>\\r\\n                <nz-form-control>\\r\\n                    <button [disabled]=\\\"isLoadingFlag\\\" nz-button class=\\\"float-right\\\" nzType=\\\"primary\\\">Send Reset Link</button>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <ng-template #emailErrorTpl let-control>\\r\\n                <ng-container *ngIf=\\\"control.hasError('email')\\\">The input is not valid E-mail!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your E-mail!</ng-container>\\r\\n            </ng-template>            \\r\\n        </form>\\r\\n    </nz-card>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Sign In </h2>\\r\\n        <form nz-form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\r\\n            <nz-spin *ngIf=\\\"isLoadingFlag\\\" class=\\\"m-b-5\\\" nzSimple></nz-spin>\\r\\n            <nz-alert *ngIf=\\\"errorMessage\\\" nzType=\\\"error\\\" [nzMessage]=\\\"errorMessage\\\" nzShowIcon></nz-alert>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzNoColon nzFor=\\\"email\\\">Email</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"emailErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"mail\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"email\\\" nz-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <div class=\\\"display-flex justify-content-between\\\">\\r\\n                    <nz-form-label nzNoColon nzFor=\\\"password\\\">Password</nz-form-label>\\r\\n                    <nz-form-label nzNoColon>\\r\\n                        <a class=\\\"float-right\\\" routerLink=\\\"../forgot-password\\\">Forgot password?</a>\\r\\n                    </nz-form-label>\\r\\n                </div>\\r\\n                <nz-form-control nzErrorTip=\\\"Please input your Password!\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"password\\\" type=\\\"password\\\" nz-input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <span>Don't have any accout? <a routerLink=\\\"../sign-up\\\">Sign Up</a> now!</span>\\r\\n                <nz-form-control>\\r\\n                    <button [disabled]=\\\"isLoadingFlag\\\" nz-button class=\\\"float-right\\\" nzType=\\\"primary\\\">Sign In</button>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <ng-template #emailErrorTpl let-control>\\r\\n                <ng-container *ngIf=\\\"control.hasError('email')\\\">The input is not valid E-mail!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your E-mail!</ng-container>\\r\\n            </ng-template>            \\r\\n        </form>\\r\\n    </nz-card>\\r\\n</div>\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Succesfully Registered! </h2>\\r\\n        <p>Please <a routerLink=\\\"../login\\\">Login</a> to continue.</p>\\r\\n    </nz-card>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Reset Password </h2>\\r\\n        <form nz-form [formGroup]=\\\"resetPasswordForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\r\\n            <nz-spin *ngIf=\\\"isLoadingFlag\\\" class=\\\"m-b-5\\\" nzSimple></nz-spin>\\r\\n            <nz-alert *ngIf=\\\"isErrorMesage\\\" nzType=\\\"error\\\" nzMessage=\\\"Can't reset your password, please try again.\\\" nzShowIcon></nz-alert>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"password\\\">Password</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"passwordErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"password\\\" type=\\\"password\\\" nz-input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"confirmPassword\\\">Confirm Password</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"confirmPasswordErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"confirmPassword\\\" type=\\\"password\\\" nz-input formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-control>\\r\\n                    <button [disabled]=\\\"isLoadingFlag\\\" nz-button class=\\\"float-right\\\" nzType=\\\"primary\\\">Reset Password</button>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <ng-template #passwordErrorTpl let-control>\\r\\n                <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your password!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('minlength')\\\">Minimum length should be 8!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('maxlength')\\\">Maximum length should be 30!</ng-container>\\r\\n            </ng-template>\\r\\n            <ng-template #confirmPasswordErrorTpl let-control>\\r\\n                <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your confirm password!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('confirm')\\\">Password doesn't match!</ng-container>\\r\\n            </ng-template>\\r\\n        </form>\\r\\n    </nz-card>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Sign Up </h2>\\r\\n        <form nz-form [formGroup]=\\\"signUpForm\\\" (ngSubmit)=\\\"submitForm(signUpForm.value)\\\">\\r\\n            <nz-spin *ngIf=\\\"isLoadingFlag\\\" class=\\\"m-b-5\\\" nzSimple></nz-spin>\\r\\n            <nz-alert *ngIf=\\\"errorMessage\\\" nzType=\\\"error\\\" [nzMessage]=\\\"errorMessage\\\" nzShowIcon></nz-alert>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"name\\\">Name</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"nameErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"user\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"name\\\" nz-input formControlName=\\\"name\\\" placeholder=\\\"Name\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"email\\\">Email</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"emailErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"mail\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"email\\\" nz-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"password\\\">Password</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"passwordErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"password\\\" type=\\\"password\\\" nz-input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"confirmPassword\\\">Confirm Password</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"confirmPasswordErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"confirmPassword\\\" type=\\\"password\\\" nz-input formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <span>Already have an accout? <a routerLink=\\\"../login\\\">Sign In</a></span>\\r\\n                <nz-form-control>\\r\\n                    <button [disabled]=\\\"isLoadingFlag\\\" nz-button class=\\\"float-right\\\" nzType=\\\"primary\\\">Sign Up</button>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>          \\r\\n        </form>\\r\\n    </nz-card>\\r\\n</div>\\r\\n<ng-template #nameErrorTpl let-control>\\r\\n    <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your name!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('minlength')\\\">Minimum length should be 6!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('maxlength')\\\">Maximum length should be 30!</ng-container>\\r\\n</ng-template>\\r\\n<ng-template #emailErrorTpl let-control>\\r\\n    <ng-container *ngIf=\\\"control.hasError('email')\\\">The input is not valid E-mail!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your E-mail!</ng-container>\\r\\n</ng-template>\\r\\n<ng-template #passwordErrorTpl let-control>\\r\\n    <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your password!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('minlength')\\\">Minimum length should be 8!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('maxlength')\\\">Maximum length should be 30!</ng-container>\\r\\n</ng-template>\\r\\n<ng-template #confirmPasswordErrorTpl let-control>\\r\\n    <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your confirm password!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('confirm')\\\">Password doesn't match!</ng-container>\\r\\n</ng-template>\\r\\n\"","import { ResetPasswordComponent } from './reset-password/reset-password.component';\r\nimport { RegistraionSuccessComponent } from './registraion-success/registraion-success.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ConfirmSuccessComponent } from './confirm-success/confirm-success.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent\r\n    },\r\n    {\r\n        path: 'sign-up',\r\n        component: SignUpComponent\r\n    },\r\n    {\r\n        path: 'forgot-password',\r\n        component: ForgotPasswordComponent\r\n    },\r\n    {\r\n        path: 'reset-password/:token',\r\n        component: ResetPasswordComponent\r\n    },\r\n    {\r\n        path: 'registration-success',\r\n        component: RegistraionSuccessComponent\r\n    },\r\n    {\r\n        path: 'confirm-success',\r\n        component: ConfirmSuccessComponent\r\n    },\r\n    {\r\n        path: '',\r\n        redirectTo: 'login'\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthenticationRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { NzCardModule } from 'ng-zorro-antd/card';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NzFormModule, NzInputModule, NzButtonModule, NzGridModule, NzSpinModule, NzAlertModule } from 'ng-zorro-antd';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegistraionSuccessComponent } from './registraion-success/registraion-success.component';\r\nimport { ConfirmSuccessComponent } from './confirm-success/confirm-success.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        SignUpComponent,\r\n        ForgotPasswordComponent,\r\n        RegistraionSuccessComponent,\r\n        ConfirmSuccessComponent,\r\n        ResetPasswordComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        AuthenticationRoutingModule,\r\n        NzCardModule,\r\n        NzFormModule,\r\n        NzInputModule,\r\n        ReactiveFormsModule,\r\n        NzButtonModule,\r\n        NzGridModule,\r\n        NzSpinModule,\r\n        NzAlertModule\r\n    ],\r\n    providers: [],\r\n})\r\nexport class AutheticationModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-confirm-success',\r\n    templateUrl: './confirm-success.component.html'\r\n})\r\nexport class ConfirmSuccessComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","import { Router } from '@angular/router';\r\nimport { FormService } from './../../../shared/service/form.service';\r\nimport { AuthService } from './../../../shared/service/auth.service';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-forgot-password',\r\n    templateUrl: './forgot-password.component.html'\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n\r\n    forgotPasswordForm: FormGroup;\r\n    isLoadingFlag: boolean;\r\n    errorMessage: string;\r\n    isSuccessMessage = false;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private authService: AuthService,\r\n        private formService: FormService,\r\n        private router: Router\r\n        ) { }\r\n\r\n    ngOnInit() {\r\n        this.forgotPasswordForm = this.fb.group({\r\n            email: [null, [Validators.required, Validators.email] ]\r\n        });\r\n    }\r\n\r\n    submitForm() {\r\n        this.errorMessage = null;\r\n        this.isSuccessMessage = false;\r\n        this.formService.makeFormDirty(this.forgotPasswordForm);\r\n        if  (this.forgotPasswordForm.valid) {\r\n            this.isLoadingFlag = true;\r\n            const status = this.authService.forgotPassword(this.forgotPasswordForm.value);\r\n            if (status) {\r\n                this.isSuccessMessage = true;\r\n                this.router.navigate(['auth/reset-password', this.forgotPasswordForm.value.email]);\r\n            } else {\r\n                this.errorMessage = 'Email address not found!';\r\n            }\r\n            this.isLoadingFlag = false;\r\n        }\r\n    }\r\n}\r\n","import { AuthService } from './../../../shared/service/auth.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormService } from 'src/shared/service/form.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html'\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    loginForm: FormGroup;\r\n    isLoadingFlag: boolean;\r\n    errorMessage: string;\r\n    redirectUrl: string;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private formService: FormService,\r\n        private activatedRoute: ActivatedRoute) {\r\n            if  (this.authService.isLoggedin()) {\r\n                this.router.navigate(['food/all-foods']);\r\n            }\r\n        }\r\n\r\n    ngOnInit() {\r\n        this.activatedRoute.queryParams.subscribe(params => {\r\n            this.redirectUrl = params.redirectURL;\r\n        });\r\n        this.loginForm = this.fb.group({\r\n            email: [null, [ Validators.required, Validators.email ] ],\r\n            password: [null, [ Validators.required ] ],\r\n        });\r\n    }\r\n\r\n    submitForm(): void {\r\n        this.errorMessage = null;\r\n        this.formService.makeFormDirty(this.loginForm);\r\n        if  (this.loginForm.valid) {\r\n            this.isLoadingFlag = true;\r\n            const status = this.authService.signIn(this.loginForm.value);\r\n            if (status) {\r\n                this.authService.saveToken(this.loginForm.value.email);\r\n                if (this.redirectUrl) {\r\n                    this.router.navigateByUrl(this.redirectUrl);\r\n                } else {\r\n                    this.router.navigate(['food/all-foods']);\r\n                }\r\n            } else {\r\n                this.errorMessage = 'Wrong username or password!';\r\n            }\r\n            this.isLoadingFlag = false;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-registraion-success',\r\n    templateUrl: './registraion-success.component.html'\r\n})\r\nexport class RegistraionSuccessComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","import { FormService } from './../../../shared/service/form.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { AuthService } from 'src/shared/service/auth.service';\r\nimport { ISignIn } from 'src/shared/interface/sign-in';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-reset-password',\r\n    templateUrl: './reset-password.component.html'\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n\r\n    resetPasswordForm: FormGroup;\r\n    isLoadingFlag: boolean;\r\n    isErrorMesage: boolean;\r\n    token: string;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private formService: FormService\r\n        ) { }\r\n\r\n    ngOnInit() {\r\n        this.activatedRoute.paramMap.subscribe(params => {\r\n            this.token = params.get('token');\r\n        });\r\n        this.resetPasswordForm = this.fb.group({\r\n            password: [null, [Validators.required, Validators.minLength(8)] ],\r\n            confirmPassword: [null, [Validators.required, this.matchPassword] ]\r\n        });\r\n    }\r\n\r\n    matchPassword = (control: FormControl): { [s: string]: boolean } => {\r\n        if (!control.value) {\r\n            return { required: true };\r\n        } else if (control.value !== this.resetPasswordForm.controls.password.value) {\r\n            return { confirm: true, error: true };\r\n        }\r\n    }\r\n\r\n    submitForm() {\r\n        this.isErrorMesage = false;\r\n        this.formService.makeFormDirty(this.resetPasswordForm);\r\n        if  (this.resetPasswordForm.valid) {\r\n            this.isLoadingFlag = true;\r\n            const model: ISignIn = {\r\n                email: this.token,\r\n                password: this.resetPasswordForm.value.password\r\n            };\r\n            const status = this.authService.resetPassword(model);\r\n            if (status) {\r\n                this.router.navigate(['auth/confirm-success']);\r\n            } else {\r\n                this.isErrorMesage = true;\r\n            }\r\n            this.isLoadingFlag = false;\r\n        }\r\n    }\r\n}\r\n","import { FormService } from './../../../shared/service/form.service';\r\nimport { AuthService } from './../../../shared/service/auth.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { ISignUp } from 'src/shared/interface/sign-up';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-sign-up',\r\n    templateUrl: './sign-up.component.html'\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n\r\n    signUpForm: FormGroup;\r\n    isLoadingFlag: boolean;\r\n    errorMessage: string;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private formService: FormService\r\n        ) { }\r\n\r\n    ngOnInit() {\r\n        this.signUpForm = this.fb.group({\r\n            name: [null, [ Validators.required, Validators.minLength(6), Validators.maxLength(30)] ],\r\n            email: [null, [ Validators.required, Validators.email ] ],\r\n            password: [null, [ Validators.required, Validators.minLength(8), Validators.maxLength(30) ] ],\r\n            confirmPassword: [null, [ Validators.required, this.matchPassword ] ],\r\n        });\r\n    }\r\n\r\n    matchPassword = (control: FormControl): { [s: string]: boolean } => {\r\n        if (!control.value) {\r\n            return { required: true };\r\n        } else if (control.value !== this.signUpForm.controls.password.value) {\r\n            return { confirm: true, error: true };\r\n        }\r\n    }\r\n\r\n    submitForm(formValue): void {\r\n        this.errorMessage = null;\r\n        this.formService.makeFormDirty(this.signUpForm);\r\n        if  (this.signUpForm.valid) {\r\n            this.isLoadingFlag = true;\r\n            const model: ISignUp = {\r\n                name: formValue.name,\r\n                email: formValue.email,\r\n                password: formValue.password\r\n            };\r\n            const status = this.authService.signUp(model);\r\n            if (status) {\r\n                this.router.navigate(['auth/registration-success']);\r\n            } else {\r\n                this.errorMessage = 'Email already exists!';\r\n            }\r\n            this.isLoadingFlag = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class FormService {\r\n\r\n    constructor() {}\r\n\r\n    makeFormDirty(form: FormGroup) {\r\n        Object.keys(form.controls).forEach(key => {\r\n            const control = form.controls[key];\r\n            control.markAsDirty();\r\n            control.updateValueAndValidity();\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"authentication-authentication-module-es5.js"}