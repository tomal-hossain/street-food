{"version":3,"sources":["./src/app/authentication/confirm-success/confirm-success.component.html","./src/app/authentication/forgot-password/forgot-password.component.html","./src/app/authentication/login/login.component.html","./src/app/authentication/registraion-success/registraion-success.component.html","./src/app/authentication/reset-password/reset-password.component.html","./src/app/authentication/sign-up/sign-up.component.html","./src/app/authentication/authentication-routing.module.ts","./src/app/authentication/authentication.module.ts","./src/app/authentication/confirm-success/confirm-success.component.ts","./src/app/authentication/forgot-password/forgot-password.component.ts","./src/app/authentication/login/login.component.ts","./src/app/authentication/registraion-success/registraion-success.component.ts","./src/app/authentication/reset-password/reset-password.component.ts","./src/app/authentication/sign-up/sign-up.component.ts","./src/shared/service/form.service.ts"],"names":[],"mappings":"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","file":"authentication-authentication-module-es2015.js","sourcesContent":["export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Success! </h2>\\r\\n        <p>Please <a routerLink=\\\"../login\\\">Login</a> to continue.</p>\\r\\n    </nz-card>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Forgot Password </h2>\\r\\n        <form nz-form [formGroup]=\\\"forgotPasswordForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\r\\n            <nz-spin *ngIf=\\\"isLoadingFlag\\\" class=\\\"m-b-5\\\" nzSimple></nz-spin>\\r\\n            <nz-alert *ngIf=\\\"errorMessage\\\" nzType=\\\"error\\\" [nzMessage]=\\\"errorMessage\\\" nzShowIcon></nz-alert>\\r\\n            <nz-alert *ngIf=\\\"isSuccessMessage\\\" nzType=\\\"success\\\" nzMessage=\\\"A password reset link has been sent to your email. Please check\\\" nzShowIcon></nz-alert>\\r\\n            <nz-form-item>\\r\\n                <nz-form-control [nzErrorTip]=\\\"emailErrorTpl\\\">\\r\\n                    <nz-form-label nzNoColon nzFor=\\\"email\\\">Email</nz-form-label>\\r\\n                    <nz-input-group nzPrefixIcon=\\\"mail\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"email\\\" nz-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <span>Back to <a routerLink=\\\"../login\\\">Sign In</a></span>\\r\\n                <nz-form-control>\\r\\n                    <button [disabled]=\\\"isLoadingFlag\\\" nz-button class=\\\"float-right\\\" nzType=\\\"primary\\\">Send Reset Link</button>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <ng-template #emailErrorTpl let-control>\\r\\n                <ng-container *ngIf=\\\"control.hasError('email')\\\">The input is not valid E-mail!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your E-mail!</ng-container>\\r\\n            </ng-template>            \\r\\n        </form>\\r\\n    </nz-card>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Sign In </h2>\\r\\n        <form nz-form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\r\\n            <nz-spin *ngIf=\\\"isLoadingFlag\\\" class=\\\"m-b-5\\\" nzSimple></nz-spin>\\r\\n            <nz-alert *ngIf=\\\"errorMessage\\\" nzType=\\\"error\\\" [nzMessage]=\\\"errorMessage\\\" nzShowIcon></nz-alert>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzNoColon nzFor=\\\"email\\\">Email</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"emailErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"mail\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"email\\\" nz-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <div class=\\\"display-flex justify-content-between\\\">\\r\\n                    <nz-form-label nzNoColon nzFor=\\\"password\\\">Password</nz-form-label>\\r\\n                    <nz-form-label nzNoColon>\\r\\n                        <a class=\\\"float-right\\\" routerLink=\\\"../forgot-password\\\">Forgot password?</a>\\r\\n                    </nz-form-label>\\r\\n                </div>\\r\\n                <nz-form-control nzErrorTip=\\\"Please input your Password!\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"password\\\" type=\\\"password\\\" nz-input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <span>Don't have any accout? <a routerLink=\\\"../sign-up\\\">Sign Up</a> now!</span>\\r\\n                <nz-form-control>\\r\\n                    <button [disabled]=\\\"isLoadingFlag\\\" nz-button class=\\\"float-right\\\" nzType=\\\"primary\\\">Sign In</button>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <ng-template #emailErrorTpl let-control>\\r\\n                <ng-container *ngIf=\\\"control.hasError('email')\\\">The input is not valid E-mail!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your E-mail!</ng-container>\\r\\n            </ng-template>            \\r\\n        </form>\\r\\n    </nz-card>\\r\\n</div>\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Succesfully Registered! </h2>\\r\\n        <p>Please <a routerLink=\\\"../login\\\">Login</a> to continue.</p>\\r\\n    </nz-card>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Reset Password </h2>\\r\\n        <form nz-form [formGroup]=\\\"resetPasswordForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\r\\n            <nz-spin *ngIf=\\\"isLoadingFlag\\\" class=\\\"m-b-5\\\" nzSimple></nz-spin>\\r\\n            <nz-alert *ngIf=\\\"isErrorMesage\\\" nzType=\\\"error\\\" nzMessage=\\\"Can't reset your password, please try again.\\\" nzShowIcon></nz-alert>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"password\\\">Password</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"passwordErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"password\\\" type=\\\"password\\\" nz-input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"confirmPassword\\\">Confirm Password</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"confirmPasswordErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"confirmPassword\\\" type=\\\"password\\\" nz-input formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-control>\\r\\n                    <button [disabled]=\\\"isLoadingFlag\\\" nz-button class=\\\"float-right\\\" nzType=\\\"primary\\\">Reset Password</button>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <ng-template #passwordErrorTpl let-control>\\r\\n                <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your password!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('minlength')\\\">Minimum length should be 8!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('maxlength')\\\">Maximum length should be 30!</ng-container>\\r\\n            </ng-template>\\r\\n            <ng-template #confirmPasswordErrorTpl let-control>\\r\\n                <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your confirm password!</ng-container>\\r\\n                <ng-container *ngIf=\\\"control.hasError('confirm')\\\">Password doesn't match!</ng-container>\\r\\n            </ng-template>\\r\\n        </form>\\r\\n    </nz-card>\\r\\n</div>\\r\\n\"","export default \"<div class=\\\"container bg\\\">\\r\\n    <nz-card class=\\\"form-card\\\">\\r\\n        <h2> Sign Up </h2>\\r\\n        <form nz-form [formGroup]=\\\"signUpForm\\\" (ngSubmit)=\\\"submitForm(signUpForm.value)\\\">\\r\\n            <nz-spin *ngIf=\\\"isLoadingFlag\\\" class=\\\"m-b-5\\\" nzSimple></nz-spin>\\r\\n            <nz-alert *ngIf=\\\"errorMessage\\\" nzType=\\\"error\\\" [nzMessage]=\\\"errorMessage\\\" nzShowIcon></nz-alert>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"name\\\">Name</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"nameErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"user\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"name\\\" nz-input formControlName=\\\"name\\\" placeholder=\\\"Name\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"email\\\">Email</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"emailErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"mail\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"email\\\" nz-input formControlName=\\\"email\\\" placeholder=\\\"Email\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"password\\\">Password</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"passwordErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"password\\\" type=\\\"password\\\" nz-input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <nz-form-label nzRequired nzNoColon nzFor=\\\"confirmPassword\\\">Confirm Password</nz-form-label>\\r\\n                <nz-form-control [nzErrorTip]=\\\"confirmPasswordErrorTpl\\\">\\r\\n                    <nz-input-group nzPrefixIcon=\\\"lock\\\">\\r\\n                        <input class=\\\"p-20\\\" id=\\\"confirmPassword\\\" type=\\\"password\\\" nz-input formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm Password\\\" />\\r\\n                    </nz-input-group>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>\\r\\n            <nz-form-item>\\r\\n                <span>Already have an accout? <a routerLink=\\\"../login\\\">Sign In</a></span>\\r\\n                <nz-form-control>\\r\\n                    <button [disabled]=\\\"isLoadingFlag\\\" nz-button class=\\\"float-right\\\" nzType=\\\"primary\\\">Sign Up</button>\\r\\n                </nz-form-control>\\r\\n            </nz-form-item>          \\r\\n        </form>\\r\\n    </nz-card>\\r\\n</div>\\r\\n<ng-template #nameErrorTpl let-control>\\r\\n    <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your name!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('minlength')\\\">Minimum length should be 6!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('maxlength')\\\">Maximum length should be 30!</ng-container>\\r\\n</ng-template>\\r\\n<ng-template #emailErrorTpl let-control>\\r\\n    <ng-container *ngIf=\\\"control.hasError('email')\\\">The input is not valid E-mail!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your E-mail!</ng-container>\\r\\n</ng-template>\\r\\n<ng-template #passwordErrorTpl let-control>\\r\\n    <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your password!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('minlength')\\\">Minimum length should be 8!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('maxlength')\\\">Maximum length should be 30!</ng-container>\\r\\n</ng-template>\\r\\n<ng-template #confirmPasswordErrorTpl let-control>\\r\\n    <ng-container *ngIf=\\\"control.hasError('required')\\\">Please input your confirm password!</ng-container>\\r\\n    <ng-container *ngIf=\\\"control.hasError('confirm')\\\">Password doesn't match!</ng-container>\\r\\n</ng-template>\\r\\n\"","import { ResetPasswordComponent } from './reset-password/reset-password.component';\r\nimport { RegistraionSuccessComponent } from './registraion-success/registraion-success.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ConfirmSuccessComponent } from './confirm-success/confirm-success.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: 'login',\r\n        component: LoginComponent\r\n    },\r\n    {\r\n        path: 'sign-up',\r\n        component: SignUpComponent\r\n    },\r\n    {\r\n        path: 'forgot-password',\r\n        component: ForgotPasswordComponent\r\n    },\r\n    {\r\n        path: 'reset-password/:token',\r\n        component: ResetPasswordComponent\r\n    },\r\n    {\r\n        path: 'registration-success',\r\n        component: RegistraionSuccessComponent\r\n    },\r\n    {\r\n        path: 'confirm-success',\r\n        component: ConfirmSuccessComponent\r\n    },\r\n    {\r\n        path: '',\r\n        redirectTo: 'login'\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthenticationRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { SignUpComponent } from './sign-up/sign-up.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { AuthenticationRoutingModule } from './authentication-routing.module';\r\nimport { NzCardModule } from 'ng-zorro-antd/card';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { NzFormModule, NzInputModule, NzButtonModule, NzGridModule, NzSpinModule, NzAlertModule } from 'ng-zorro-antd';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RegistraionSuccessComponent } from './registraion-success/registraion-success.component';\r\nimport { ConfirmSuccessComponent } from './confirm-success/confirm-success.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        LoginComponent,\r\n        SignUpComponent,\r\n        ForgotPasswordComponent,\r\n        RegistraionSuccessComponent,\r\n        ConfirmSuccessComponent,\r\n        ResetPasswordComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        AuthenticationRoutingModule,\r\n        NzCardModule,\r\n        NzFormModule,\r\n        NzInputModule,\r\n        ReactiveFormsModule,\r\n        NzButtonModule,\r\n        NzGridModule,\r\n        NzSpinModule,\r\n        NzAlertModule\r\n    ],\r\n    providers: [],\r\n})\r\nexport class AutheticationModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-confirm-success',\r\n    templateUrl: './confirm-success.component.html'\r\n})\r\nexport class ConfirmSuccessComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n}\r\n","import { Router } from '@angular/router';\r\nimport { FormService } from './../../../shared/service/form.service';\r\nimport { AuthService } from './../../../shared/service/auth.service';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-forgot-password',\r\n    templateUrl: './forgot-password.component.html'\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n\r\n    forgotPasswordForm: FormGroup;\r\n    isLoadingFlag: boolean;\r\n    errorMessage: string;\r\n    isSuccessMessage = false;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private authService: AuthService,\r\n        private formService: FormService,\r\n        private router: Router\r\n        ) { }\r\n\r\n    ngOnInit() {\r\n        this.forgotPasswordForm = this.fb.group({\r\n            email: [null, [Validators.required, Validators.email] ]\r\n        });\r\n    }\r\n\r\n    submitForm() {\r\n        this.errorMessage = null;\r\n        this.isSuccessMessage = false;\r\n        this.formService.makeFormDirty(this.forgotPasswordForm);\r\n        if  (this.forgotPasswordForm.valid) {\r\n            this.isLoadingFlag = true;\r\n            const status = this.authService.forgotPassword(this.forgotPasswordForm.value);\r\n            if (status) {\r\n                this.isSuccessMessage = true;\r\n                this.router.navigate(['auth/reset-password', this.forgotPasswordForm.value.email]);\r\n            } else {\r\n                this.errorMessage = 'Email address not found!';\r\n            }\r\n            this.isLoadingFlag = false;\r\n        }\r\n    }\r\n}\r\n","import { AuthService } from './../../../shared/service/auth.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormService } from 'src/shared/service/form.service';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html'\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n    loginForm: FormGroup;\r\n    isLoadingFlag: boolean;\r\n    errorMessage: string;\r\n    redirectUrl: string;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private formService: FormService,\r\n        private activatedRoute: ActivatedRoute) {\r\n            if  (this.authService.isLoggedin()) {\r\n                this.router.navigate(['food/all-foods']);\r\n            }\r\n        }\r\n\r\n    ngOnInit() {\r\n        this.activatedRoute.queryParams.subscribe(params => {\r\n            this.redirectUrl = params.redirectURL;\r\n        });\r\n        this.loginForm = this.fb.group({\r\n            email: [null, [ Validators.required, Validators.email ] ],\r\n            password: [null, [ Validators.required ] ],\r\n        });\r\n    }\r\n\r\n    submitForm(): void {\r\n        this.errorMessage = null;\r\n        this.formService.makeFormDirty(this.loginForm);\r\n        if  (this.loginForm.valid) {\r\n            this.isLoadingFlag = true;\r\n            const status = this.authService.signIn(this.loginForm.value);\r\n            if (status) {\r\n                this.authService.saveToken(this.loginForm.value.email);\r\n                if (this.redirectUrl) {\r\n                    this.router.navigateByUrl(this.redirectUrl);\r\n                } else {\r\n                    this.router.navigate(['food/all-foods']);\r\n                }\r\n            } else {\r\n                this.errorMessage = 'Wrong username or password!';\r\n            }\r\n            this.isLoadingFlag = false;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-registraion-success',\r\n    templateUrl: './registraion-success.component.html'\r\n})\r\nexport class RegistraionSuccessComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n    }\r\n}\r\n","import { FormService } from './../../../shared/service/form.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { AuthService } from 'src/shared/service/auth.service';\r\nimport { ISignIn } from 'src/shared/interface/sign-in';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-reset-password',\r\n    templateUrl: './reset-password.component.html'\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n\r\n    resetPasswordForm: FormGroup;\r\n    isLoadingFlag: boolean;\r\n    isErrorMesage: boolean;\r\n    token: string;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private formService: FormService\r\n        ) { }\r\n\r\n    ngOnInit() {\r\n        this.activatedRoute.paramMap.subscribe(params => {\r\n            this.token = params.get('token');\r\n        });\r\n        this.resetPasswordForm = this.fb.group({\r\n            password: [null, [Validators.required, Validators.minLength(8)] ],\r\n            confirmPassword: [null, [Validators.required, this.matchPassword] ]\r\n        });\r\n    }\r\n\r\n    matchPassword = (control: FormControl): { [s: string]: boolean } => {\r\n        if (!control.value) {\r\n            return { required: true };\r\n        } else if (control.value !== this.resetPasswordForm.controls.password.value) {\r\n            return { confirm: true, error: true };\r\n        }\r\n    }\r\n\r\n    submitForm() {\r\n        this.isErrorMesage = false;\r\n        this.formService.makeFormDirty(this.resetPasswordForm);\r\n        if  (this.resetPasswordForm.valid) {\r\n            this.isLoadingFlag = true;\r\n            const model: ISignIn = {\r\n                email: this.token,\r\n                password: this.resetPasswordForm.value.password\r\n            };\r\n            const status = this.authService.resetPassword(model);\r\n            if (status) {\r\n                this.router.navigate(['auth/confirm-success']);\r\n            } else {\r\n                this.isErrorMesage = true;\r\n            }\r\n            this.isLoadingFlag = false;\r\n        }\r\n    }\r\n}\r\n","import { FormService } from './../../../shared/service/form.service';\r\nimport { AuthService } from './../../../shared/service/auth.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\r\nimport { ISignUp } from 'src/shared/interface/sign-up';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'app-sign-up',\r\n    templateUrl: './sign-up.component.html'\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n\r\n    signUpForm: FormGroup;\r\n    isLoadingFlag: boolean;\r\n    errorMessage: string;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private authService: AuthService,\r\n        private router: Router,\r\n        private formService: FormService\r\n        ) { }\r\n\r\n    ngOnInit() {\r\n        this.signUpForm = this.fb.group({\r\n            name: [null, [ Validators.required, Validators.minLength(6), Validators.maxLength(30)] ],\r\n            email: [null, [ Validators.required, Validators.email ] ],\r\n            password: [null, [ Validators.required, Validators.minLength(8), Validators.maxLength(30) ] ],\r\n            confirmPassword: [null, [ Validators.required, this.matchPassword ] ],\r\n        });\r\n    }\r\n\r\n    matchPassword = (control: FormControl): { [s: string]: boolean } => {\r\n        if (!control.value) {\r\n            return { required: true };\r\n        } else if (control.value !== this.signUpForm.controls.password.value) {\r\n            return { confirm: true, error: true };\r\n        }\r\n    }\r\n\r\n    submitForm(formValue): void {\r\n        this.errorMessage = null;\r\n        this.formService.makeFormDirty(this.signUpForm);\r\n        if  (this.signUpForm.valid) {\r\n            this.isLoadingFlag = true;\r\n            const model: ISignUp = {\r\n                name: formValue.name,\r\n                email: formValue.email,\r\n                password: formValue.password\r\n            };\r\n            const status = this.authService.signUp(model);\r\n            if (status) {\r\n                this.router.navigate(['auth/registration-success']);\r\n            } else {\r\n                this.errorMessage = 'Email already exists!';\r\n            }\r\n            this.isLoadingFlag = false;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class FormService {\r\n\r\n    constructor() {}\r\n\r\n    makeFormDirty(form: FormGroup) {\r\n        Object.keys(form.controls).forEach(key => {\r\n            const control = form.controls[key];\r\n            control.markAsDirty();\r\n            control.updateValueAndValidity();\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///"}